<?php
/**
 * this is model layer. what so called Data logic layer
 * classes in this layer shall be extended from relevant classes in Table layer
 * classes in this layer  will be called from controller layer
 */
namespace App\Model;

use App\Table\{$serviceName}Table;
use Gemvc\Http\JsonResponse;
use Gemvc\Http\Response;

class {$serviceName}Model extends {$serviceName}Table
{
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Create new {$serviceName}
     * 
     * @return JsonResponse
     */
    public function createModel(): JsonResponse
    {
        $success = $this->insertSingleQuery();
        if ($this->getError()) {
            return Response::internalError("Failed to create {$serviceName}: " . $this->getError());
        }
        return Response::created($success, 1, "{$serviceName} created successfully");
    }

    /**
     * Get {$serviceName} by ID
     * 
     * @return JsonResponse
     */
    public function readModel(): JsonResponse
    {
        $item = $this->selectById($this->id);
        if (!$item) {
            return Response::notFound("{$serviceName} not found");
        }
        return Response::success($item, 1, "{$serviceName} retrieved successfully");
    }

    /**
     * Update existing {$serviceName}
     * 
     * @return JsonResponse
     */
    public function updateModel(): JsonResponse
    {
        $item = $this->selectById($this->id);
        if (!$item) {
            return Response::notFound("{$serviceName} not found");
        }
        $success = $this->updateSingleQuery();
        if ($this->getError()) {
            return Response::internalError("Failed to update {$serviceName}: " . $this->getError());
        }
        return Response::updated($success, 1, "{$serviceName} updated successfully");
    }

    /**
     * Delete {$serviceName}
     * 
     * @return JsonResponse
     */
    public function deleteModel(): JsonResponse
    {
        $item = $this->selectById($this->id);
        if (!$item) {
            return Response::notFound("{$serviceName} not found");
        }
        $success = $this->deleteByIdQuery($this->id);
        if ($this->getError()) {
            return Response::internalError("Failed to delete {$serviceName}: " . $this->getError());
        }
        return Response::deleted($success, 1, "{$serviceName} deleted successfully");
    }
} 